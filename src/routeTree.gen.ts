/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StudyScheduleRouteImport } from './routes/study-schedule'
import { Route as NotesRouteImport } from './routes/notes'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CollaborationRouteImport } from './routes/collaboration'
import { Route as AiGenerationRouteImport } from './routes/ai-generation'
import { Route as IndexRouteImport } from './routes/index'

const StudyScheduleRoute = StudyScheduleRouteImport.update({
  id: '/study-schedule',
  path: '/study-schedule',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesRoute = NotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CollaborationRoute = CollaborationRouteImport.update({
  id: '/collaboration',
  path: '/collaboration',
  getParentRoute: () => rootRouteImport,
} as any)
const AiGenerationRoute = AiGenerationRouteImport.update({
  id: '/ai-generation',
  path: '/ai-generation',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ai-generation': typeof AiGenerationRoute
  '/collaboration': typeof CollaborationRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/notes': typeof NotesRoute
  '/study-schedule': typeof StudyScheduleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ai-generation': typeof AiGenerationRoute
  '/collaboration': typeof CollaborationRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/notes': typeof NotesRoute
  '/study-schedule': typeof StudyScheduleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/ai-generation': typeof AiGenerationRoute
  '/collaboration': typeof CollaborationRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/notes': typeof NotesRoute
  '/study-schedule': typeof StudyScheduleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ai-generation'
    | '/collaboration'
    | '/dashboard'
    | '/login'
    | '/notes'
    | '/study-schedule'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ai-generation'
    | '/collaboration'
    | '/dashboard'
    | '/login'
    | '/notes'
    | '/study-schedule'
  id:
    | '__root__'
    | '/'
    | '/ai-generation'
    | '/collaboration'
    | '/dashboard'
    | '/login'
    | '/notes'
    | '/study-schedule'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AiGenerationRoute: typeof AiGenerationRoute
  CollaborationRoute: typeof CollaborationRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  NotesRoute: typeof NotesRoute
  StudyScheduleRoute: typeof StudyScheduleRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/study-schedule': {
      id: '/study-schedule'
      path: '/study-schedule'
      fullPath: '/study-schedule'
      preLoaderRoute: typeof StudyScheduleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes': {
      id: '/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collaboration': {
      id: '/collaboration'
      path: '/collaboration'
      fullPath: '/collaboration'
      preLoaderRoute: typeof CollaborationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai-generation': {
      id: '/ai-generation'
      path: '/ai-generation'
      fullPath: '/ai-generation'
      preLoaderRoute: typeof AiGenerationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AiGenerationRoute: AiGenerationRoute,
  CollaborationRoute: CollaborationRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  NotesRoute: NotesRoute,
  StudyScheduleRoute: StudyScheduleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
